/** 
 * Replace $old-value by $new-value in $list
 * -------------------------------------------------------------------------------
 * @example replace( (a, b, c), b, z )         => a, z, c
 * @example replace( (a, b, c), y, z )         => a, b, c
 * @example replace( (a, b, c a), a, z )       => z, b, c z
 * @example replace( (a, b, c a), a, z, true ) => z, b, c z
 * -------------------------------------------------------------------------------
 * @param $list [List] : list
 * @param $old-value [Literal] : value to replace
 * @param $new-value [Literal] : new value for $old-value
 * @param $recursive [Boolean] : enable / disable recursivity
 * -------------------------------------------------------------------------------
 * @return [List]
 */
@function replace($list, $old-value, $new-value, $recursive: false) {
  $result: ();

  @for $i from 1 through length($list) {
    @if type-of(nth($list, $i)) == list and $recursive {
      $result: append($result, replace(nth($list, $i), $old-value, $new-value, $recursive));
    }

    @else {
      @if nth($list, $i) == $old-value {
        $result: append($result, $new-value);
      }

      @else {
        $result: append($result, nth($list, $i));
      }
    }
  }

  @return $result;
}