/*! SassyLists - v1.1.0 - 2014-06-30 */
// Compares two values based on alphabetical order
//
// @access private
//
// @param {*}       $a      - first value
// @param {*}       $b      - second value
// @param {List}    $matrix - alphabetical order
//
// @return {Bool}

@function str-compare($a, $b, $order) {
  @if type-of($a) == "number" and type-of($b) == "number" {
    @return $a < $b;
  }
  $a: to-lower-case($a + unquote(""));
  $b: to-lower-case($b + unquote(""));
  @for $i from 1 through min(str-length($a), str-length($b)) {
    $char-a: str-slice($a, $i, $i);
    $char-b: str-slice($b, $i, $i);
    @if $char-a and $char-b and index($order, $char-a) != index($order, $char-b) {
      @return index($order, $char-a) < index($order, $char-b);
    }
  }
  @return str-length($a) < str-length($b);
}
// Returns truthiness of a value
//
// @access private
//
// @param {*} $value - value to check
//
// @return {Bool}

@function is-true($value) {
  @return if($value == null, false, $value and $value != null and $value != "" and $value != ());
}
// Chunks $list into $size large lists
//
// @ignore Documentation: http://sassylists.com/documentation/#chunk
//
// @param {List}   $list  - list to chunk
// @param {Number} $size  - length of lists
//
// @throws $size is not a number for `chunk`.
//
// @return {List | Bool}

@function chunk($list, $size) {
  @if type-of($size) != "number" {
    @warn "#{$size} is not a number for `chunk`.";
    @return false;
  }

  @if $size >= length($list) {
    @return $list;
  }

  $index: 1;
  $result: ();
  $length: length($list);
  $end: ceil($length / $size);

  @for $i from 1 through $end {
    $tmp: ();

    @for $j from 1 through $size {
      @if $index <= $length {
        $is-orphan: $length % $size == 1 and $j == 1;
        $tmp: if($is-orphan, nth($list, $index), append($tmp, nth($list, $index)));
      }
      $index: $index + 1;
    }

    $result: append($result, $tmp);
  }

  @return $result;
}
// Returns whether $list contains $value
//
// @ignore Documentation: http://sassylists.com/documentation/#contain
//
// @param {List}    $list  - list to check
// @param {*}       $value - value to look for
//
// @return {Bool}

@function contain($list, $value) {
  @return not not index($list, $value);
}

// @alias contain

@function include($list, $value) {
  @return contain($list, $value);
}
// Counts the number of occurrences of each value of $list
//
// @ignore Documentation: http://sassylists.com/documentation/#count-values
//
// @param {List} $list - list to count values from
//
// @return {Map} Values mapped to their count

@function count-values($list) {
  $map: ();

  @each $item in $list {
    $index: map-get($map, $item);
    $value: if($index, $index + 1, 1);
    $map: map-merge($map, ($item: $value));
  }

  @return $map;
}
// Returns $list as a string
//
// @ignore Documentation: http://sassylists.com/documentation/#debug
//
// @param {List}   $list          - list to debug
// @param {Bool}   $pre   (false) - enable/disable variables type and proper indentation
// @param {Number} $level (1)     - internal variable for recursion
//
// @return {String}

@function debug($list, $pre: false, $level: 1) {
  @if length($list) == 0 {
    @return "( )";
  }

  @if length($list) == 1 {
    @return if($pre,  "(" + type-of($list) + ") ", "") + $list;
  }

  $tab: "    ";
  $indent: "";
  $break: if($pre, "\A ", "");
  $length: length($list);

  @for $i from 1 to $level {
    $indent: $indent + $tab;
  }

  $result: "[" + $break;

  @for $i from 1 through $length {
    $item: nth($list, $i);
    $result: $result + if($pre, $indent + $tab, " ");

    @if length($item) > 1 {
      $result: $result
        + if($pre, "(list: " + length($item) + ") ", "")
        + debug($item, $pre, $level + 1);
    }

    @else {
      @if $pre {
        $result: $result + "(" + type-of($item) + ") ";
      }

      @if length($item) == 0 {
        $result: $result + "( )";
      }

      @else if type-of($item) == "string" {
        $result: $result + quote($item);
      }

      @else if $item == null {
        $result: $result + "null";
      }

      @else {
        $result: $result + $item;
      }
    }

    @if $i != $length {
      $result: $result + "," + $break;
    }
  }

  $result: $result + $break + if($pre, if($level > 1, $indent, ""), " ") + "]";

  @return quote($result);
}

// Mixin displaying clean debug
//
// @param {List} $list - list
//
// @requires {function} debug

@mixin debug($list) {
  body:before {
    content: debug($list, true)               !important;

    display: block                            !important;
    margin: 1em                               !important;
    padding: .5em                             !important; 

    background: #EFEFEF                       !important;
    border: 1px solid #DDD                    !important;
    border-radius: .2em                       !important;

    color: #333                               !important;
    font: .75em/1.5 "Courier New", monospace  !important;
    text-shadow: 0 1px white                  !important;
    white-space: pre-wrap                     !important;
  }
}

// Explode $string into a list using $break as a breaker
//
// @ignore Documentation: http://sassylists.com/documentation/#explode
//
// @param {String} $string         - string to explode
// @param {String} $separator ('') - string to use as a delimiter
//
// @throws $string is not a string for `explode`.
// @throws $delimiter is not a string for `explode`.
//
// @return {List | Bool}

@function explode($string, $delimiter: '') {
  @if type-of($string) != "string" {
    @warn "`explode` function expecting a string; #{type-of($string)} given.";
    @return false;
  }

  @if type-of($delimiter) != "string" {
    @warn "`explode` function expecting a string; #{type-of($delimiter)} given.";
    @return false;
  }

  $result: ();
  $length: str-length($string);

  @if str-length($delimiter) == 0 {
    @for $i from 1 through $length {
      $result: append($result, str-slice($string, $i, $i));
    }
    @return $result;
  }

  $running: true;
  $remaining: $string;

  @while $running {
    $index: str-index($remaining, $delimiter);
    @if not $index or $index == 0 {
      $running: false;
    }
    @else {
      $slice: str-slice($remaining, 1, $index - 1);
      $result: append($result, $slice);
      $remaining: str-slice($remaining, $index + str-length($delimiter));
    }
  }

  @return append($result, $remaining);
}
// Returns first element of $list
//
// @ignore Documentation: http://sassylists.com/documentation/#first
//
// @param {List} $list - list to retrieve first item from
//
// @throws Cannot find first item of empty list.
//
// @return {*}

@function first($list) {
  @if length($list) == 0 {
    @warn "Cannot find first item of empty list.";
    @return false;
  }

  @return nth($list, 1);
}

// @alias first

@function head($list) {
  @return first($list);
}
// Turns multidimensional $list into a one-level list
//
// @ignore Documentation: http://sassylists.com/documentation.html#flatten
//
// @param {List} $list - list to flatten
//
// @return {List}

@function flatten($list) {
  $result: ();

  @if length($list) == 1 {
    @return $list;
  }

  @each $item in $list {
    @if length($item) > 1 {
      $flatten: flatten($item);
      @each $i in $flatten {
        $result: append($result, $i, list-separator($list));
      }
    }

    @else {
      $result: append($result, $item, list-separator($list));
    }
  }

  @return $result;
}

// @alias flatten

@function unfold($list) {
    @return flatten($list);
}
// Adds $value at $index in $list
//
// @ignore Documentation: http://sassylists.com/documentation/#insert-nth
//
// @requires is-true
//
// @param {List}    $list  - list to update
// @param {Number}  $index - index to add
// @param {*}       $value - value to add
//
// @throws List index $index is not a number for `insert-nth`.
// @throws List index $index must be a non-zero integer for `insert-nth`.
//
// @return {List | Bool}

@function insert-nth($list, $index, $value) {
  $length: length($list);

  @if type-of($index) != number {
    @warn "List index #{$index} is not a number for `insert-nth`.";
    @return false;
  }

  @if $index < 1 {
    @warn "List index #{$index} must be a non-zero integer for `insert-nth`.";
    @return false;
  }

  @if $index > $length {
    @return append($list, $value, list-separator($list));
  }

  $result: ();

  @for $i from 1 through $length {
    @if $i == $index {
      @if is-true($value) {
        $result: append($result, $value, list-separator($list));
      }
    }

    $result: append($result, nth($list, $i), list-separator($list));
  }

  @return $result;
}

// Returns a list of shared value from $list and $lists minus duplicates
//
// @ignore Documentation: http://sassylists.com/documentation/#intersection
//
// @requires remove-duplicates
//
// @param {List}    $list  - first list
// @param {ArgList} $lists - other lists
//
// @return {List}

@function intersection($list, $lists...) {
  $result: $list;

  @each $list in $lists {
    $temp: ();

    @each $item in $result {
      @if not not index($list, $item) {
        $temp: append($temp, $item, list-separator($list));
      }
    }

    $result: $temp;
  }

  $result: remove-duplicates($result);
  @return if(length($result) == 1, nth($result, 1), $result);
}
// Checks whether $list is symmetrical (one-level deep)
//
// @ignore Documentation: http://sassylists.com/documentation/#is-symmetrical
//
// @requires reverse
//
// @param {List} $list - list to check
//
// @return {Bool}

@function is-symmetrical($list) {
  @return $list == reverse($list);
}

// @alias is-symmetrical

@function is-mirror($list) {
  @return is-symmetrical($list);
}
// Returns last index of $value in $list
//
// @ignore Documentation: http://sassylists.com/documentation/#last-index
//
// @param {List}    $list  - list to search
// @param {*}       $value - value to be searched for
//
// @return {Number | Null}

@function last-index($list, $value) {
  $length: length($list);

  @for $i from $length through 1 {
    @if nth($list, $i) == $value {
      @return $i;
    }
  }

  @return null;
}

// Returns last element of $list
//
// @ignore Documentation: http://sassylists.com/documentation/#last
//
// @param {List} $list - list to retrieve last value from
//
// @throws Cannot find last item of empty list.
//
// @return {*}

@function last($list) {
  @if length($list) == 0 {
    @warn "Cannot find last item of empty list.";
    @return false;
  }

  @return nth($list, -1);
}
// Shift indexes from $list of $value
//
// @ignore Documentation: http://sassylists.com/documentation/#loop
//
// @param {List}   $list      - list to update
// @param {Number} $value (1) - number of position between old and new indexes
//
// @throws $value is not a number for `loop`.
//
// @return {List | Bool}

@function loop($list, $value: 1) {
  @if type-of($value) != "number" {
    @warn "#{$value} is not a number for `loop`.";
    @return false;
  }

  @if length($list) < 2 {
    @return $list;
  }

  $result: ();
  $length: length($list);

  @for $i from 0 to $length {
    $result: append($result, nth($list, ($i - $value) % $length + 1), list-separator($list));
  }

  @return $result;
}

// @alias shift-indexes

@function shift-indexes($list, $value: 1) {
  @return loop($list, $value);
}
// Adds $value as first index of $list
//
// @ignore Documentation: http://sassylists.com/documentation/#prepend
//
// @requires is-true
//
// @param {List}    $list  - list to preprend value to
// @param {*}       $value - value to prepend to the list
//
// @return {List}

@function prepend($list, $value) {
  @if is-true($value) {
    @return join($value, $list, list-separator($list));
  }

  @else {
    @return $list;
  }
}

// Removes all false and null values from $list
//
// @ignore Documentation: http://sassylists.com/documentation.html#purge
//
// @requires is-true
//
// @param {List} $list - list to purge
//
// @return {List}

@function purge($list) {
  $result: ();

  @each $item in $list {
    @if is-true($item) {
      $result: append($result, $item, list-separator($list));
    }
  }

  @return $result;
}

// @alias purge

@function clean($list) {
  @return purge($list);
}

// Returns a random value of $list
//
// @ignore Documentation: http://sassylists.com/documentation.html#random-value
//
// @param {List} $list - list to random value from
//
// @throws Cannot find a random value in an empty list.
//
// @return {*}

@function random-value($list) {
  @if length($list) == 0 {
    @warn "Cannot find a random value in an empty list.";
    @return false;
  }

  @return nth($list, random(length($list)) + 1);
}

// @alias random-value

@function roll($list) {
  @return random-value($list);
}

// @alias random-value

@function luck($list) {
  @return random-value($list);
}
// Removes duplicate values from $list
//
// @ignore Documentation: http://sassylists.com/documentation/#remove-duplicates
//
// @param {List} $list - list to remove duplicates from
//
// @return {List}

@function remove-duplicates($list) {
  $result: ();

  @each $item in $list {
    @if not index($result, $item) {
      $result: append($result, $item, list-separator($list));
    }
  }

  @return $result;
}

// @alias remove-duplicates

@function unique($list) {
  @return remove-duplicates($list);
}
// Removes value from $list at index $index
//
// @ignore Documentation: http://sassylists.com/documentation/#remove-nth
//
// @requires replace-nth
//
// @param {List}   $list  - list to remove value from
// @param {Number} $index - index to remove
//
// @return {List | Bool}

@function remove-nth($list, $index) {
  @return replace-nth($list, $index, "");
}

// @alias remove-nth

@function without-nth($list, $index) {
  @return remove-nth($list, $index);
}
// Removes value(s) $value from $list
//
// @ignore Documentation: http://sassylists.com/documentation/#remove
//
// @requires replace
//
// @param {List}    $list      - list to update
// @param {*}       $value     - value to remove
// @param {Bool}    $recursive - enable/disable recursion
//
// @return {List}

@function remove($list, $value) {
  @return replace($list, $value, null);
}

// @alias remove

@function without($list, $value) {
  @return remove($list, $value);
}
// Replaces value at $index from $list by $value
//
// @ignore Documentation: http://sassylists.com/documentation/#replace-nth
//
// @requires purge
// @requires is-true
//
// @param {List}   $list  - list to update
// @param {Number} $index - index to update
// @param {*}      $value - new value for index
//
// @throws Invalid index $index for `replace-nth`.
//
// @return {List | Bool}

@function replace-nth($list, $index, $value) {
  @if type-of($index) != "number" or $index == 0 or abs($index) > length($list) {
    @warn "Invalid index (#{$index}) for `replace-nth`.";
    @return false;
  }

  $list: set-nth($list, $index, $value);
  @return if(not is-true($value), purge($list), $list);
}

// Replaces $old by $new in $list
//
// @ignore Documentation: http://sassylists.com/documentation.html#replace
//
// @requires is-true
//
// @param {List}    $list  - list to update
// @param {*}       $old   - value to replace
// @param {*}       $value - new value for $old
//
// @return {List}

@function replace($list, $old, $value) {
  $running: true;

  @while $running {
    $index: index($list, $old);

    @if not $index {
      $running: false;
    }

    @else {
      $list: set-nth($list, $index, $value);
    }

  }

  @return if(not is-true($value), purge($list), $list);
}
// Reverses the order of $list
//
// @ignore Documentation: http://sassylists.com/documentation/#reverse
//
// @param {List} $list - list to revers
//
// @return {List}

@function reverse($list) {
  $length: length($list);
  $end: floor($length/2);

  @if $length < 2 {
    @return $list;
  }

  @for $i from 1 through $end {
    $tmp: nth($list, $i);
    $list: set-nth($list, $i, nth($list, -$i));
    $list: set-nth($list, -$i, $tmp);
  }

  @return $list;
}

// @alias reverse

@function mirror($list) {
  @return reverse($list);
}
// Shuffle function using Fisher-Yates method
//
// @ignore Documentation: http://sassylists.com/documentation/#shuffle
//
// @param {List} $list - list to shuffle
//
// @return {List}

@function shuffle($list) {
  $length: length($list);

  @if $length < 2 {
    @return $list;
  }

  @for $i from $length through 1 {
    $j: random($length - 1) + 1;
    $tmp: nth($list, $i);
    $list: set-nth($list, $i, nth($list, $j));
    $list: set-nth($list, $j, $tmp);
  }
  @return $list;
}

// @alias shuffle

@function randomize($list) {
  @return shuffle($list);
}

// Slices $list between $start and $end
//
// @ignore Documentation: http://sassylists.com/documentation/#slice
//
// @param {List}   $list                  - list to slice
// @param {Number} $start (1)             - start index
// @param {Number} $end   (length($list)) - end index
//
// @throws List indexes $start and $end must be numbers for `slice`.
// @throws Start index has to be lesser than or equals to the end index for `slice`.
// @throws List indexes must be non-zero integers for `slice`.
// @throws Start index has to be lesser than or equal to list length for `slice`.
// @throws End index has to be lesser than or equal to list length for `slice`.
//
// @return {List | Bool}

@function slice($list, $start: 1, $end: length($list)) {
  @if type-of($start) != "number" or type-of($end) != "number" {
    @warn "List indexes #{$start} and #{$end} must be numbers for `slice`.";
    @return false;
  }

  @if $start > $end {
    @warn "Start index is #{$start} but has to be lesser than or equals to the end index (#{$end}) for `slice`.";
    @return false;
  }

  @if $start < 1 or $end < 1 {
    @warn "List indexes must be non-zero integers for `slice`.";
    @return false;
  }

  @if $start > length($list) {
    @warn "Start index is #{$start} but list is only #{length($list)} items long for `slice`.";
    @return false;
  }

  @if $end > length($list) {
    @warn "End index is #{$end} but list is only #{length($list)} items long for `slice`.";
    @return false;
  }

  $result: ();
  @for $i from $start through $end {
    $result: append($result, nth($list, $i), list-separator($list));
  }

  @return $result;
}
// Sorts values of $list using quick-sort algorithm
//
// @ignore Documentation: http://sassylists.com/documentation/#sort
//
// @requires str-compare
//
// @param {List} $list  - list to sort
// @param {List} $order - order to respect
//
// @return {List}

@function sort($list, $order: "!" "#" "$" "%" "&" "'" "(" ")" "*" "+" "," "-" "." "/" "[" "\\" "]" "^" "_" "{" "|" "}" "~" "0" "1" "2" "3" "4" "5" "6" "7" "8" "9" "a" "b" "c" "d" "e" "f" "g" "h" "i" "j" "k" "l" "m" "n" "o" "p" "q" "r" "s" "t" "u" "v" "w" "x" "y" "z") {
  $less:  ();
  $equal: ();
  $large: ();
  $length: length($list);

  @if $length > 1 {
    $seed: nth($list, ceil($length / 2));
    @each $item in $list {
      @if $item == $seed {
        $equal: append($equal, $item, list-separator($list));
      }
      @else if str-compare($item, $seed, $order) {
        $less: append($less, $item, list-separator($list));
      }
      @else if not str-compare($item, $seed, $order) {
        $large: append($large, $item, list-separator($list));
      }
    }
    @return join(join(sort($less, $order), $equal), sort($large, $order));
  }
  @return $list;
}

// @alias sort

@function order($list) {
  @return sort($list);
}

// Sums up all numeric values in $list
//
// @ignore Documentation: http://sassylists.com/documentation/#sum
//
// @param {List}    $list          - list
// @param {Boolean} $force (false) - enable/disable parseInt
//
// @return {Number}

@function sum($list, $force: false) {
  $result: 0;

  @each $item in $list {
    @if type-of($item) == number {

      @if $force and not unitless($item) {
        $item: $item / ($item * 0 + 1);
      }

      @if unitless($item) {
        $result: $result + $item;
      }

    }
  }

  @return $result;
}

// Returns the tail of $list: all items except the first (head)
//
// @ignore Documentation: http://sassylists.com/documentation/#tail
//
// @requires slice
//
// @param {List} $list - list to retrieve tail from
//
// @return {List | Bool}

@function tail($list) {
  @return slice($list, 2);
}

// @alias tail

@function rest($list) {
  @return tail($list);
}
// Joins all elements of $list with $glue
//
// @ignore Documentation: http://sassylists.com/documentation/#to-string
//
// @param {List}   $list      - list to cast
// @param {String} $glue ('') - value to use as a join string
//
// @return {String}

@function to-string($list, $glue: '') {
  $result: '';
  $length: length($list);

  @for $i from 1 through $length {
    $item: nth($list, $i);
    $result: $result + if(length($item) > 1, to-string($item, $glue), $item + $glue);
  }

  @return quote(str-slice($result, 1, str-length($glue) * -1 - 1));
}

// @alias to-string

@function stringify($list, $glue: '') {
  @return to-string($list, $glue);
}
// Returns a list of values from $lists minus duplicates
//
// @ignore Documentation: http://sassylists.com/documentation/#union
//
// @requires flatten
// @requires remove-duplicates
//
// @param {ArgList} $lists - lists to unify
//
// @return {List}

@function union($lists...) {
  $result: remove-duplicates(flatten($lists));
  @return if(length($result) == 1, nth($result, 1), $result);
}

// @alias union

@function merge($lists...) {
  @return union($lists...);
}

// Apply $function to every item from $list passing $args as parameters
//
// @ignore Documentation: http://sassylists.com/documentation/#walk
//
// @param {List}    $list     - list to update
// @param {String}  $function - function to call on each value
// @param {ArgList} $args     - optional function arguments
//
// @throws There is no $function function.
//
// @return {List | Bool}

@function walk($list, $function, $args...) {
  @if not function-exists($function) {
    @warn "There is no `#{$function}` function.";
    @return false;
  }

  @for $i from 1 through length($list) {
    $list: set-nth($list, $i, call($function, nth($list, $i), $args...));
  }
  
  @return $list;
}